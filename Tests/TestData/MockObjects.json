{
    "Invoke-ScriptAnalyzer": [
        {
            "1Result_PSProvideCommentHelp": {
                "RuleName": "PSProvideCommentHelp",
                    "Extent": {
                        "Text": "BadFunction"
                    }
            }
        },
        {
            "2Results_2Rules": [
                {
                    "RuleName": "PSProvideCommentHelp",
                        "Extent": {
                            "Text": "VeryBadFunction"
                        }
                },
                {
                    "RuleName": "PSAvoidGlobalVars",
                        "Extent": {
                            "Text": "VeryBadFunction"
                        }
                }
            ]
        }
    ],
    "Get-FunctionDefinition": [
        {
            "IfStatements": {
                "Extent": {
                    "Text": [
                        "Function Test-Conditional",
                        "{",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$IfElseif",
                        "    )",
                        "",
                        "    # Testing If/ElseIf conditional statement",
                        "    If ( $IfElseif -eq 10 ) {",
                        "        Write-Host 'IfElseif is 10'",
                        "    }",
                        "    ElseIf ( $IfElseif -eq 11 ) {",
                        "        Write-Host 'IfElseif is 11'",
                        "    }",
                        "    ElseIf ( $IfElseif -eq 12 ) {",
                        "        Write-Host 'IfElseif is 12'",
                        "    }",
                        "    Else {",
                        "        Write-Host 'IfElseif is different'",
                        "    }",
                        "",
                        "    # Testing nested If statement",
                        "    If ( $IfElseif -gt 20 ) {",
                        "        If ( $IfElseif -gt 40 ) {",
                        "            Write-Host 'IfElseif is between 20 and 40'",
                        "        }",
                        "        Else {",
                        "            Write-Host 'IfElseif is greater than 40'",
                        "        }",
                        "    }",
                        "    Else {",
                        "        If ( $IfElseif -ge 10 ) {",
                        "            Write-Host 'IfElseif is a 2 digit number'",
                        "        }",
                        "        Else {",
                        "            Write-Host 'IfElseif is a 1 digit number'",
                        "        }",
                        "    }",
                        "}"
                    ]
                }
            }
        },
        {
            "NoIfStatements": {
                "Extent": {
                    "Text": [
                        "Function Test-Conditional",
                        "{",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$IfElseif",
                        "    )",
                        "",
                        "    Write-Host 'There is no If nor is there any ElseIf'",
                        "}"
                    ]
                }
            }
        },
        {
            "NoSwitchStatements": {
                "Extent": {
                    "Text": [
                        "Function Test-Conditional",
                        "{",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$Switch",
                        "    )",
                        "",
                        "    Write-Host 'There is no Switch Statement'",
                        "}"
                    ]
                }
            }
        },
        {
            "SwitchStatements": {
                "Extent": {
                    "Text": [
                        "Function Test-Conditional",
                        "{",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$Switch",
                        "    )",
                        "",
                        "    Switch ($Switch)",
                        "    {",
                        "        10 {",
                        "            Write-Host 'IfElseif is 10'",
                        "            Break",
                        "        }",
                        "        11 {",
                        "            Write-Host 'IfElseif is 11'",
                        "            Break",
                        "        }",
                        "        12 {",
                        "            Write-Host 'IfElseif is 12'",
                        "            Break",
                        "        }",
                        "        Default {",
                        "            Write-Host 'Switch is different'",
                        "        }",
                        "    }",
                        "}"
                    ]
                }
            }
        },
        {
            "SwitchWithNoBreakStatements": {
                "Extent": {
                    "Text": [
                        "Function Test-SwitchWithoutBreak {",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$Switch",
                        "    )",
                        "",
                        "    Switch ($Switch)",
                        "    {",
                        "        10 { Write-Host 'IfElseif is 10' }",
                        "        11 { Write-Host 'IfElseif is 11'; Break }",
                        "        12 { Write-Host 'IfElseif is 12'; Break }",
                        "        Default { Write-Host 'Switch is different' }",
                        "    }",
                        "    $Now = Get-Date",
                        "",
                        "    Switch ($Now.Month)",
                        "    {",
                        "        1 { $Month = 'January' }",
                        "        2 { $Month = 'February' }",
                        "        3 { $Month = 'March' }",
                        "        4 { $Month = 'April' }",
                        "        5 { $Month = 'May' }",
                        "        6 { $Month = 'June' }",
                        "        7 { $Month = 'July' }",
                        "        8 { $Month = 'August' }",
                        "        9 { $Month = 'September' }",
                        "        10 { $Month = 'October' }",
                        "        11 { $Month = 'November' }",
                        "        12 { $Month = 'December' }",
                        "    }",
                        "}"
                    ]
                }
            }
        },
        {
            "NoLogicalOp": {
                "Extent": {
                    "Text": [
                        "Function Test-Conditional",
                        "{",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$LogicalOp",
                        "    )",
                        "",
                        "    Write-Host 'There is no logical operator'",
                        "}"
                    ]
                }
            }
        },
        {
            "LogicalOps": {
                "Extent": {
                    "Text": [
                        "Function Test-Conditional",
                        "{",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$LogicalOp,",
                        "        [int]$LogicalOp2",
                        "    )",
                        "    # Testing Logical operators",
                        "    If ( $LogicalOp -gt 10 -and $LogicalOp2 -gt 10 ) {",
                        "        Write-Host 'Both are greater to 10'",
                        "    }",
                        "    If ( $LogicalOp -gt 10 -or $LogicalOp2 -gt 10 ) {",
                        "        Write-Host 'At least one is greater than 10'",
                        "    }",
                        "    If ( $LogicalOp -gt 10 -xor $LogicalOp2 -gt 10 ) {",
                        "        Write-Host 'Only one is greater than 10'",
                        "    }",
                        "}"
                    ]
                }
            }
        },
        {
            "NoTrapOrCatch": {
                "Extent": {
                    "Text": [
                        "Function Test-Conditional",
                        "{",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$Trap",
                        "    )",
                        "",
                        "    Write-Host 'There is no Trap statement or Catch clause'",
                        "}"
                    ]
                }
            }
        },
        {
            "TrapAndCatch": {
                "Extent": {
                    "Text": [
                        "Function Test-Conditional",
                        "{",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$Trap,",
                        "        [int]$Catch",
                        "    )",
                        "    #Testing Trap statements and Catch clauses in Try statements",
                        "    Try {",
                        "        $Catch | Out-String -ErrorAction Stop",
                        "    }",
                        "    Catch [System.OutOfMemoryException] {",
                        "        Try {",
                        "            Restart-Computer -Force",
                        "        }",
                        "        Catch {",
                        "            Write-Error 'Please, kill me !'",
                        "        }",
                        "    }",
                        "    Catch [System.NullReferenceException] {",
                        "        Write-Warning '$Catch was Null'",
                        "    }",
                        "    Catch {",
                        "        Write-Error $_.Exception.Message",
                        "    }",
                        "    Trap {",
                        "        Write-Warning 'Trapped exception'",
                        "    }",
                        "    $Trap | Out-String -ErrorAction Stop",
                        "}"
                    ]
                }
            }
        },
        {
            "NoForStatement": {
                "Extent": {
                    "Text": [
                        "Function Test-Conditional",
                        "{",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$For",
                        "    )",
                        "",
                        "    Write-Host 'There is no For statement'",
                        "}"
                    ]
                }
            }
        },
        {
            "ForStatements": {
                "Extent": {
                    "Text": [
                        "Function Test-For {",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$For,",
                        "        ",
                        "        [int]$For2",
                        "    )",
                        "    #Testing For statements",
                        "    For ($i = 1; $i -lt 99; $i++) {",
                        "        Write-Host \"$($For + $i)\"",
                        "       ",
                        "        For ($j = 0; $j -lt 10; $j++) {",
                        "            Write-Host \"$($For2 - $j)\"",
                        "        }",
                        "    }",
                        "    For ($k = 1;;$k++) {",
                        "        Write-Host 'No Condition for this loop'",
                        "    }",
                        "}"
                    ]
                }
            }
        },
        {
            "NoWhileStatement": {
                "Extent": {
                    "Text": [
                        "Function Test-Conditional",
                        "{",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$While",
                        "    )",
                        "",
                        "    Write-Host 'There is no While statement'",
                        "}"
                    ]
                }
            }
        },
        {
            "WhileStatements": {
                "Extent": {
                    "Text": [
                        "Function Test-While {",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$While,",
                        "       ",
                        "        [int]$While2",
                        "    )",
                        "    #Testing While statements",
                        "    While ($While -lt 99) {",
                        "        Write-Host 'While is less than 99'",
                        "        $While++",
                        "       ",
                        "        While ($While2 -lt 10) {",
                        "            Write-Host 'While2 is less than 10'",
                        "            $While2++",
                        "        }",
                        "    }",
                        "}"
                    ]
                }
            }
        },
        {
            "NoBranching": {
                "Extent": {
                    "Text": [
                        "Function Test-Conditional",
                        "{",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$While",
                        "    )",
                        "",
                        "    Write-Host 'There is no branching statement'",
                        "}"
                    ]
                }
            }
        },
        {
            "MultipleBranchings": {
                "Extent": {
                    "Text": [
                        "Function Test-Conditional",
                        "{",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$While",
                        "    )",
                        "",
                        "# Testing While statements",
                        "While ($While -lt 99) {",
                        "    Write-Host 'While is less than 99'",
                        "    $While++",
                        "",
                        "    While ($While2 -lt 10) {",
                        "        Write-Host 'While2 is less than 10'",
                        "        $While2++",
                        "    }",
                        "}",
                        "While ( 'I am always true' ) {",
                        "    Write-Host 'This is true'",
                        "}",
                        "# Testing If/ElseIf conditional statement",
                        "If ( $IfElseif -eq 10 ) {",
                        "    Write-Host 'IfElseif is 10'",
                        "}",
                        "ElseIf ( $IfElseif -eq 11 ) {",
                        "    Write-Host 'IfElseif is 11'",
                        "}",
                        "ElseIf ( $IfElseif -eq 12 ) {",
                        "    Write-Host 'IfElseif is 12'",
                        "}",
                        "Else {",
                        "    Write-Host 'IfElseif is different'",
                        "}",
                        "",
                        "# Testing nested If statement",
                        "If ( $IfElseif -gt 20 ) {",
                        "    If ( $IfElseif -gt 40 ) {",
                        "        Write-Host 'IfElseif is between 20 and 40'",
                        "    }",
                        "    Else {",
                        "        Write-Host 'IfElseif is greater than 40'",
                        "    }",
                        "}",
                        "Else {",
                        "    If ( $IfElseif -ge 10 ) {",
                        "        Write-Host 'IfElseif is a 2 digit number'",
                        "    }",
                        "    Else {",
                        "        Write-Host 'IfElseif is a 1 digit number'",
                        "    }",
                        "}",
                        "# Testing Logical operators",
                        "If ( $LogicalOp -gt 10 -and $LogicalOp2 -gt 10 ) {",
                        "    Write-Host 'Both are greater to 10'",
                        "}",
                        "If ( $LogicalOp -gt 10 -or $LogicalOp2 -gt 10 ) {",
                        "    Write-Host 'At least one is greater than 10'",
                        "}",
                        "If ( $LogicalOp -gt 10 -xor $LogicalOp2 -gt 10 ) {",
                        "    Write-Host 'Only one is greater than 10'",
                        "}",
                        "# Testing Trap statements and Catch clauses in Try statements",
                        "Try {",
                        "    $Catch | Out-String -ErrorAction Stop",
                        "}",
                        "Catch [System.OutOfMemoryException] {",
                        "    Try {",
                        "        Restart-Computer -Force",
                        "    }",
                        "    Catch {",
                        "        Write-Error 'Please, kill me !'",
                        "    }",
                        "}",
                        "Catch [System.NullReferenceException] {",
                        "    Write-Warning '$Catch was Null'",
                        "}",
                        "Catch {",
                        "    Write-Error $_.Exception.Message",
                        "   }",
                        "}"
                    ]
                }
            }
        },
        {
            "NoNesting": {
                "Extent": {
                    "Text": [
                        "Function Test-Nesting",
                        "{",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$While",
                        "    )",
                        "",
                        "    $DateTime = Get-Date",
                        "   Write-Host \"Today is $($DateTime.DayOfWeek)\"",
                        "   Write-Host \"What time is it ? It is $($DateTime.TimeOfDay)\"",
                        "}"
                    ]
                }
            }
        },
        {
            "NestingDepth4": {
                "Extent": {
                    "Text": [
                        "Function Test-NestingDepth {",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$While,",
                        "",
                        "        [int]$While2",
                        "    )",
                        "    # Testing If/ElseIf conditional statement",
                        "    If ( $IfElseif -eq 10 ) {",
                        "        Write-Host 'IfElseif is 10'",
                        "    }",
                        "    ElseIf ( $IfElseif -eq 11 ) {",
                        "        Write-Host 'IfElseif is 11'",
                        "    }",
                        "    # Testing nested If statement",
                        "    If ( $IfElseif -gt 20 ) {",
                        "        If ( $IfElseif -gt 40 ) {",
                        "            Write-Host 'IfElseif is between 20 and 40'",
                        "        }",
                        "        Else {",
                        "            Write-Host 'IfElseif is greater than 40'",
                        "        }",
                        "    }",
                        "    Else {",
                        "        If ( $IfElseif -ge 10 ) {",
                        "            Write-Host 'IfElseif is a 2 digit number'",
                        "        }",
                        "        Else {",
                        "            Write-Host 'IfElseif is a 1 digit number'",
                        "",
                        "            # Nested Try/Catch",
                        "            Try {",
                        "                $Now = Get-Date -ErrorAction Stop",
                        "            }",
                        "            Catch {",
                        "                While ( $Now -lt (Get-Date -Year 2120)) {",
                        "                    Write-Host 'Wait a little while'",
                        "                }",
                        "            }",
                        "        }",
                        "    }",
                        "}"
                    ]
                }
            }
        }
    ],
    "Invoke-Pester": [
        {
            "1CommandAnalyzed": {
                "CodeCoverage": {
                    "NumberOfCommandsAnalyzed": 1,
                    "NumberOfCommandsExecuted": 0,
                    "NumberOfCommandsMissed": 1,
                    "MissedCommands": "Mocked missed command"

                }
            }
        },
        {
            "0CommandAnalyzed": {
                "CodeCoverage": {
                    "NumberOfCommandsAnalyzed": 0,
                    "NumberOfCommandsExecuted": 1,
                    "NumberOfCommandsMissed": 0
                }
            }
        },
        {
            "NumberOfTests": {
                "TotalCount": 51,
                "FailedCount": 7,
                "PassedCount": 44,
                "CodeCoverage": {
                    "NumberOfCommandsAnalyzed": 27,
                    "NumberOfCommandsMissed": 5,
                    "NumberOfCommandsExecuted": 22
                },
                "Name": "MockResultName",
                "Time": {
                    "TotalSeconds": 3
                },
                "FailureMessage": "MockFailureMessage",
                "StackTrace": "MockStackTrace"
            }
        },
        {
            "2FailedTests": [
                {
                    "TestResult": {
                        "Passed": false,
                        "Describe": "MockDescribe",
                        "Name": "MockTestName",
                        "StackTrace": [", C:\\GitHub\\PSCodeHealth\\Tests\\TestData\\coveralls\\Coveralls.Tests.ps1: line 97",
                            "97:             ($Result | Where-Object { $_ -eq 1 }).Count | Should Be 2"],
                        "FailureMessage": "MockFailureMessage"
                    }
                },
                {
                    "TestResult": {
                        "Passed": false,
                        "Describe": "MockDescribe2",
                        "Name": "MockTestName2",
                        "StackTrace": [", C:\\GitHub\\PSCodeHealth\\Tests\\TestData\\coveralls\\Coveralls.Tests.ps1: line 101",
                            "101:             ($Result | Where-Object { $_ -eq 0 }).Count | Should BeNullOrEmpty"],
                        "FailureMessage": "MockFailureMessage2"
                    }
                }
            ]
        }
    ],
    "New-FunctionHealthRecord": [
        {
            "Single": {
                "FunctionName": "Test-Function",
                "LinesOfCode": 101,
                "ScriptAnalyzerFindings": 3,
                "Complexity": 19,
                "MaximumNestingDepth": 5,
                "ScriptAnalyzerResultDetails": [
                    {
                        "Severity": "Error"
                    },
                    {
                        "Severity": "Warning"
                    },
                    {
                        "Severity": "Information"
                    }
                ],
                "ContainsHelp": true
            }
        },
        {
            "Single1Finding": {
                "FunctionName": "Test-Function",
                "LinesOfCode": 101,
                "ScriptAnalyzerFindings": 1,
                "Complexity": 19,
                "MaximumNestingDepth": 5,
                "ScriptAnalyzerResultDetails": {
                    "Severity": "Warning"
                },
                "ContainsHelp": true
            }
        },
        {
            "2HealthRecords": [
                {
                    "FunctionName": "Test-Function1",
                    "LinesOfCode": 101,
                    "ScriptAnalyzerFindings": 3,
                    "Complexity": 19,
                    "MaximumNestingDepth": 5,
                    "ScriptAnalyzerResultDetails": [
                        {
                            "Severity": "Error"
                        },
                        {
                            "Severity": "Warning"
                        },
                        {
                            "Severity": "Information"
                        }
                    ],
                    "ContainsHelp": true
                },
                {
                    "FunctionName": "Test-Function2",
                    "LinesOfCode": 86,
                    "ScriptAnalyzerFindings": 6,
                    "Complexity": 12,
                    "MaximumNestingDepth": 2,
                    "ScriptAnalyzerResultDetails": [
                        {
                            "Severity": "Error"
                        },
                        {
                            "Severity": "Warning"
                        },
                        {
                            "Severity": "Information"
                        },
                        {
                            "Severity": "Warning"
                        },
                        {
                            "Severity": "Information"
                        },
                        {
                            "Severity": "Warning"
                        }
                    ],
                    "ContainsHelp": false
                }
            ]
        }
    ],
    "New-PSCodeHealthComplianceResult": [
        {
            "WarningsAndPass": [
                {
                    "Result": "Warning"
                },
                {
                    "Result": "Pass"
                },
                {
                    "Result": "Pass"
                }
            ]
        },
        {
            "AllPass": [
                {
                    "Result": "Pass"
                },
                {
                    "Result": "Pass"
                },
                {
                    "Result": "Pass"
                }
            ]
        }
    ],
    "Invoke-PSCodeHealth": [
        {
            "NoFunctionHealthRecord": {
                "Files": 4,
                "Functions": 0,
                "LinesOfCodeTotal": 291,
                "LinesOfCodeAverage": 0,
                "ScriptAnalyzerFindingsTotal": 9,
                "ScriptAnalyzerErrors": 1,
                "ScriptAnalyzerWarnings": 4,
                "ScriptAnalyzerInformation": 6,
                "ScriptAnalyzerFindingsAverage": 0,
                "NumberOfTests" : 10,
                "NumberOfFailedTests": 1,
                "NumberOfPassedTests": 9,
                "TestsPassRate": 90,
                "TestCoverage": 0,
                "CommandsMissedTotal": 296,
                "ComplexityAverage": 0,
                "ComplexityHighest": 0,
                "NestingDepthAverage": 0,
                "NestingDepthHighest": 0,
                "FunctionHealthRecords": null
            }
        },
        {
            "1FunctionHealthRecord": {
                "Files": 4,
                "Functions": 0,
                "LinesOfCodeTotal": 291,
                "LinesOfCodeAverage": 0,
                "ScriptAnalyzerFindingsTotal": 9,
                "ScriptAnalyzerErrors": 1,
                "ScriptAnalyzerWarnings": 4,
                "ScriptAnalyzerInformation": 6,
                "ScriptAnalyzerFindingsAverage": 0,
                "NumberOfTests" : 10,
                "NumberOfFailedTests": 1,
                "NumberOfPassedTests": 9,
                "TestsPassRate": 90,
                "TestCoverage": 77,
                "CommandsMissedTotal": 296,
                "ComplexityAverage": 0,
                "ComplexityHighest": 19,
                "NestingDepthAverage": 0,
                "NestingDepthHighest": 5,
                "FunctionHealthRecords":
                {
                    "FunctionName": "Test-Function1",
                    "LinesOfCode": 101,
                    "ScriptAnalyzerFindings": 3,
                    "Complexity": 19,
                    "MaximumNestingDepth": 5,
                    "TestCoverage": 95,
                    "CommandsMissed": 3,
                    "ScriptAnalyzerResultDetails": [
                        {
                            "Severity": "Error"
                        },
                        {
                            "Severity": "Warning"
                        },
                        {
                            "Severity": "Information"
                        }
                    ]
                }
            }
        },
        {
            "2FunctionHealthRecords": {
                "Files": 4,
                "Functions": 2,
                "LinesOfCodeTotal": 187,
                "LinesOfCodeAverage": 93.5,
                "ScriptAnalyzerFindingsTotal": 11,
                "ScriptAnalyzerErrors": 2,
                "ScriptAnalyzerWarnings": 4,
                "ScriptAnalyzerInformation": 3,
                "ScriptAnalyzerFindingsAverage": 5.5,
                "NumberOfTests" : 10,
                "NumberOfFailedTests": 1,
                "NumberOfPassedTests": 9,
                "TestsPassRate": 90,
                "TestCoverage": 81,
                "CommandsMissedTotal": 21,
                "ComplexityAverage": 15.5,
                "ComplexityHighest": 19,
                "NestingDepthAverage": 3.5,
                "NestingDepthHighest": 5,
                "FunctionHealthRecords": [
                {
                    "FunctionName": "Test-Function1",
                    "LinesOfCode": 101,
                    "ScriptAnalyzerFindings": 3,
                    "Complexity": 19,
                    "MaximumNestingDepth": 5,
                    "TestCoverage": 79,
                    "CommandsMissed": 12,
                    "ScriptAnalyzerResultDetails": [
                        {
                            "Severity": "Error"
                        },
                        {
                            "Severity": "Warning"
                        },
                        {
                            "Severity": "Information"
                        }
                    ],
                    "ContainsHelp": false
                },
                {
                    "FunctionName": "Test-Function2",
                    "LinesOfCode": 86,
                    "ScriptAnalyzerFindings": 6,
                    "Complexity": 12,
                    "MaximumNestingDepth": 2,
                    "TestCoverage": 83,
                    "CommandsMissed": 11,
                    "ScriptAnalyzerResultDetails": [
                        {
                            "Severity": "Error"
                        },
                        {
                            "Severity": "Warning"
                        },
                        {
                            "Severity": "Information"
                        },
                        {
                            "Severity": "Warning"
                        },
                        {
                            "Severity": "Information"
                        },
                        {
                            "Severity": "Warning"
                        }
                    ],
                    "ContainsHelp": true
                }
            ]
        }
        }
    ],
    "Get-Content":
    [
        "<title>PSCodeHealth Report - {REPORT_TITLE}</title>",
        "</head>",
        "<body>",
        "    <h1>",
        "        <img id=\"logo\" src= \"https://github.com/MathieuBuisson/PSCodeHealth/raw/master/PSCodeHealth/Assets/PSCodeHealthLogo.png\" alt=\"PSCodeHealth Logo\"/>",
        "        PSCodeHealth Report - {REPORT_TITLE} <small class=\"analyzed-path\"> {ANALYZED_PATH} - {DATE}</small>",
        "    </h1>"
    ]
}